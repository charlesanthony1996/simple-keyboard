{"version":3,"file":"index.modern.js","mappings":"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","sources":["webpack://SimpleKeyboard/webpack/universalModuleDefinition","webpack://SimpleKeyboard/webpack/bootstrap","webpack://SimpleKeyboard/webpack/runtime/define property getters","webpack://SimpleKeyboard/webpack/runtime/hasOwnProperty shorthand","webpack://SimpleKeyboard/webpack/runtime/make namespace object","webpack://SimpleKeyboard/./src/lib/services/Utilities.ts","webpack://SimpleKeyboard/./src/lib/services/PhysicalKeyboard.ts","webpack://SimpleKeyboard/./src/lib/components/CandidateBox.ts","webpack://SimpleKeyboard/./src/lib/components/Keyboard.ts","webpack://SimpleKeyboard/./src/lib/services/KeyboardLayout.ts","webpack://SimpleKeyboard/./src/lib/index.modern.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { KeyboardInput } from \"./../interfaces\";\nimport { KeyboardOptions, UtilitiesParams } from \"../interfaces\";\n\n/**\n * Utility Service\n */\nclass Utilities {\n  getOptions: () => KeyboardOptions;\n  getCaretPosition: () => number | null;\n  getCaretPositionEnd: () => number | null;\n  dispatch: any;\n  maxLengthReached!: boolean;\n\n  /**\n   * Creates an instance of the Utility service\n   */\n  constructor({\n    getOptions,\n    getCaretPosition,\n    getCaretPositionEnd,\n    dispatch,\n  }: UtilitiesParams) {\n    this.getOptions = getOptions;\n    this.getCaretPosition = getCaretPosition;\n    this.getCaretPositionEnd = getCaretPositionEnd;\n    this.dispatch = dispatch;\n\n    /**\n     * Bindings\n     */\n    Utilities.bindMethods(Utilities, this);\n  }\n\n  /**\n   * Retrieve button type\n   *\n   * @param  {string} button The button's layout name\n   * @return {string} The button type\n   */\n  getButtonType(button: string): string {\n    return button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\"\n      ? \"functionBtn\"\n      : \"standardBtn\";\n  }\n\n  /**\n   * Adds default classes to a given button\n   *\n   * @param  {string} button The button's layout name\n   * @return {string} The classes to be added to the button\n   */\n  getButtonClass(button: string): string {\n    const buttonTypeClass = this.getButtonType(button);\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\n    let buttonNormalized = \"\";\n\n    if (buttonTypeClass !== \"standardBtn\")\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\n\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\n  }\n\n  /**\n   * Default button display labels\n   */\n  getDefaultDiplay() {\n    return {\n      \"{bksp}\": \"backspace\",\n      \"{backspace}\": \"backspace\",\n      \"{enter}\": \"< enter\",\n      \"{shift}\": \"shift\",\n      \"{shiftleft}\": \"shift\",\n      \"{shiftright}\": \"shift\",\n      \"{alt}\": \"alt\",\n      \"{s}\": \"shift\",\n      \"{tab}\": \"tab\",\n      \"{lock}\": \"caps\",\n      \"{capslock}\": \"caps\",\n      \"{accept}\": \"Submit\",\n      \"{space}\": \" \",\n      \"{//}\": \" \",\n      \"{esc}\": \"esc\",\n      \"{escape}\": \"esc\",\n      \"{f1}\": \"f1\",\n      \"{f2}\": \"f2\",\n      \"{f3}\": \"f3\",\n      \"{f4}\": \"f4\",\n      \"{f5}\": \"f5\",\n      \"{f6}\": \"f6\",\n      \"{f7}\": \"f7\",\n      \"{f8}\": \"f8\",\n      \"{f9}\": \"f9\",\n      \"{f10}\": \"f10\",\n      \"{f11}\": \"f11\",\n      \"{f12}\": \"f12\",\n      \"{numpaddivide}\": \"/\",\n      \"{numlock}\": \"lock\",\n      \"{arrowup}\": \"↑\",\n      \"{arrowleft}\": \"←\",\n      \"{arrowdown}\": \"↓\",\n      \"{arrowright}\": \"→\",\n      \"{prtscr}\": \"print\",\n      \"{scrolllock}\": \"scroll\",\n      \"{pause}\": \"pause\",\n      \"{insert}\": \"ins\",\n      \"{home}\": \"home\",\n      \"{pageup}\": \"up\",\n      \"{delete}\": \"del\",\n      \"{forwarddelete}\": \"del\",\n      \"{end}\": \"end\",\n      \"{pagedown}\": \"down\",\n      \"{numpadmultiply}\": \"*\",\n      \"{numpadsubtract}\": \"-\",\n      \"{numpadadd}\": \"+\",\n      \"{numpadenter}\": \"enter\",\n      \"{period}\": \".\",\n      \"{numpaddecimal}\": \".\",\n      \"{numpad0}\": \"0\",\n      \"{numpad1}\": \"1\",\n      \"{numpad2}\": \"2\",\n      \"{numpad3}\": \"3\",\n      \"{numpad4}\": \"4\",\n      \"{numpad5}\": \"5\",\n      \"{numpad6}\": \"6\",\n      \"{numpad7}\": \"7\",\n      \"{numpad8}\": \"8\",\n      \"{numpad9}\": \"9\",\n    };\n  }\n  /**\n   * Returns the display (label) name for a given button\n   *\n   * @param  {string} button The button's layout name\n   * @param  {object} display The provided display option\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\n   */\n  getButtonDisplayName(\n    button: string,\n    display: KeyboardOptions[\"display\"],\n    mergeDisplay = false\n  ) {\n    if (mergeDisplay) {\n      display = Object.assign({}, this.getDefaultDiplay(), display);\n    } else {\n      display = display || this.getDefaultDiplay();\n    }\n\n    return display[button] || button;\n  }\n\n  /**\n   * Returns the updated input resulting from clicking a given button\n   *\n   * @param  {string} button The button's layout name\n   * @param  {string} input The input string\n   * @param  {number} caretPos The cursor's current position\n   * @param  {number} caretPosEnd The cursor's current end position\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  getUpdatedInput(\n    button: string,\n    input: string,\n    caretPos: any,\n    caretPosEnd = caretPos,\n    moveCaret = false\n  ) {\n    const options = this.getOptions();\n    const commonParams: [number | undefined, number | undefined, boolean] = [\n      caretPos,\n      caretPosEnd,\n      moveCaret,\n    ];\n\n    let output = input;\n\n    if (\n      (button === \"{bksp}\" || button === \"{backspace}\") &&\n      output.length > 0\n    ) {\n      output = this.removeAt(output, ...commonParams);\n    } else if (\n      (button === \"{delete}\" || button === \"{forwarddelete}\") &&\n      output.length > 0\n    ) {\n      output = this.removeForwardsAt(output, ...commonParams);\n    } else if (button === \"{space}\")\n      output = this.addStringAt(output, \" \", ...commonParams);\n    else if (\n      button === \"{tab}\" &&\n      !(\n        typeof options.tabCharOnTab === \"boolean\" &&\n        options.tabCharOnTab === false\n      )\n    ) {\n      output = this.addStringAt(output, \"\\t\", ...commonParams);\n    } else if (\n      (button === \"{enter}\" || button === \"{numpadenter}\") &&\n      options.newLineOnEnter\n    )\n      output = this.addStringAt(output, \"\\n\", ...commonParams);\n    else if (\n      button.includes(\"numpad\") &&\n      Number.isInteger(Number(button[button.length - 2]))\n    ) {\n      output = this.addStringAt(\n        output,\n        button[button.length - 2],\n        ...commonParams\n      );\n    } else if (button === \"{numpaddivide}\")\n      output = this.addStringAt(output, \"/\", ...commonParams);\n    else if (button === \"{numpadmultiply}\")\n      output = this.addStringAt(output, \"*\", ...commonParams);\n    else if (button === \"{numpadsubtract}\")\n      output = this.addStringAt(output, \"-\", ...commonParams);\n    else if (button === \"{numpadadd}\")\n      output = this.addStringAt(output, \"+\", ...commonParams);\n    else if (button === \"{numpaddecimal}\")\n      output = this.addStringAt(output, \".\", ...commonParams);\n    else if (button === \"{\" || button === \"}\")\n      output = this.addStringAt(output, button, ...commonParams);\n    else if (!button.includes(\"{\") && !button.includes(\"}\"))\n      output = this.addStringAt(output, button, ...commonParams);\n\n    if(options.debug){\n      console.log(\"Input will be: \"+ output);\n    }\n\n    return output;\n  }\n\n  /**\n   * Moves the cursor position by a given amount\n   *\n   * @param  {number} length Represents by how many characters the input should be moved\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\n   */\n  updateCaretPos(length: number, minus = false) {\n    const newCaretPos = this.updateCaretPosAction(length, minus);\n\n    this.dispatch((instance: any) => {\n      instance.setCaretPosition(newCaretPos);\n    });\n  }\n\n  /**\n   * Action method of updateCaretPos\n   *\n   * @param  {number} length Represents by how many characters the input should be moved\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\n   */\n  updateCaretPosAction(length: number, minus = false) {\n    const options = this.getOptions();\n    let caretPosition = this.getCaretPosition();\n\n    if (caretPosition != null) {\n      if (minus) {\n        if (caretPosition > 0) caretPosition = caretPosition - length;\n      } else {\n        caretPosition = caretPosition + length;\n      }\n    }\n\n    if (options.debug) {\n      console.log(\"Caret at:\", caretPosition);\n    }\n\n    return caretPosition;\n  }\n\n  /**\n   * Adds a string to the input at a given position\n   *\n   * @param  {string} source The source input\n   * @param  {string} str The string to add\n   * @param  {number} position The (cursor) position where the string should be added\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  addStringAt(\n    source: string,\n    str: string,\n    position = source.length,\n    positionEnd = source.length,\n    moveCaret = false\n  ) {\n    let output;\n\n    if (!position && position !== 0) {\n      output = source + str;\n    } else {\n      output = [source.slice(0, position), str, source.slice(positionEnd)].join(\n        \"\"\n      );\n\n      /**\n       * Avoid caret position change when maxLength is set\n       */\n      if (!this.isMaxLengthReached()) {\n        if (moveCaret) this.updateCaretPos(str.length);\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Check whether the button is a standard button\n   */\n  isStandardButton = (button: string) =>\n    button && !(button[0] === \"{\" && button[button.length - 1] === \"}\");\n\n  /**\n   * Removes an amount of characters before a given position\n   *\n   * @param  {string} source The source input\n   * @param  {number} position The (cursor) position from where the characters should be removed\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  removeAt(\n    source: string,\n    position = source.length,\n    positionEnd = source.length,\n    moveCaret = false\n  ) {\n    if (position === 0 && positionEnd === 0) {\n      return source;\n    }\n\n    let output;\n\n    if (position === positionEnd) {\n      let prevTwoChars;\n      let emojiMatched;\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\n\n      /**\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\n       */\n      if (position && position >= 0) {\n        prevTwoChars = source.substring(position - 2, position);\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\n\n        if (emojiMatched) {\n          output = source.substr(0, position - 2) + source.substr(position);\n          if (moveCaret) this.updateCaretPos(2, true);\n        } else {\n          output = source.substr(0, position - 1) + source.substr(position);\n          if (moveCaret) this.updateCaretPos(1, true);\n        }\n      } else {\n        prevTwoChars = source.slice(-2);\n        emojiMatched = prevTwoChars.match(emojiMatchedReg);\n\n        if (emojiMatched) {\n          output = source.slice(0, -2);\n          if (moveCaret) this.updateCaretPos(2, true);\n        } else {\n          output = source.slice(0, -1);\n          if (moveCaret) this.updateCaretPos(1, true);\n        }\n      }\n    } else {\n      output = source.slice(0, position) + source.slice(positionEnd);\n      if (moveCaret) {\n        this.dispatch((instance: any) => {\n          instance.setCaretPosition(position);\n        });\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Removes an amount of characters after a given position\n   *\n   * @param  {string} source The source input\n   * @param  {number} position The (cursor) position from where the characters should be removed\n   */\n  removeForwardsAt(\n    source: string,\n    position: number = source.length,\n    positionEnd: number = source.length,\n    moveCaret = false\n  ) {\n    if (!source?.length || position === null) {\n      return source;\n    }\n\n    let output;\n\n    if (position === positionEnd) {\n      const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\n\n      /**\n       * Emojis are made out of two characters, so we must take a custom approach to trim them.\n       * For more info: https://mathiasbynens.be/notes/javascript-unicode\n       */\n      const nextTwoChars = source.substring(position, position + 2);\n      const emojiMatched = nextTwoChars.match(emojiMatchedReg);\n\n      if (emojiMatched) {\n        output = source.substr(0, position) + source.substr(position + 2);\n      } else {\n        output = source.substr(0, position) + source.substr(position + 1);\n      }\n    } else {\n      output = source.slice(0, position) + source.slice(positionEnd);\n      if (moveCaret) {\n        this.dispatch((instance: any) => {\n          instance.setCaretPosition(position);\n        });\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\n   *\n   * @param  {object} inputObj\n   * @param  {string} updatedInput\n   */\n  handleMaxLength(inputObj: KeyboardInput, updatedInput: string) {\n    const options = this.getOptions();\n    const maxLength = options.maxLength;\n    const currentInput = inputObj[options.inputName || \"default\"];\n    const condition = updatedInput.length - 1 >= maxLength;\n\n    if (\n      /**\n       * If pressing this button won't add more characters\n       * We exit out of this limiter function\n       */\n      updatedInput.length <= currentInput.length\n    ) {\n      return false;\n    }\n\n    if (Number.isInteger(maxLength)) {\n      if (options.debug) {\n        console.log(\"maxLength (num) reached:\", condition);\n      }\n\n      if (condition) {\n        /**\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\n         */\n        this.maxLengthReached = true;\n        return true;\n      } else {\n        this.maxLengthReached = false;\n        return false;\n      }\n    }\n\n    if (typeof maxLength === \"object\") {\n      const condition =\n        updatedInput.length - 1 >= maxLength[options.inputName || \"default\"];\n\n      if (options.debug) {\n        console.log(\"maxLength (obj) reached:\", condition);\n      }\n\n      if (condition) {\n        this.maxLengthReached = true;\n        return true;\n      } else {\n        this.maxLengthReached = false;\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Gets the current value of maxLengthReached\n   */\n  isMaxLengthReached() {\n    return Boolean(this.maxLengthReached);\n  }\n\n  /**\n   * Determines whether a touch device is being used\n   */\n  isTouchDevice() {\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\n  }\n\n  /**\n   * Determines whether pointer events are supported\n   */\n  pointerEventsSupported() {\n    return !!window.PointerEvent;\n  }\n\n  /**\n   * Bind all methods in a given class\n   */\n\n  static bindMethods(myClass: any, instance: any) {\n    // eslint-disable-next-line no-unused-vars\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\n      const excludeMethod =\n        myMethod === \"constructor\" || myMethod === \"bindMethods\";\n      if (!excludeMethod) {\n        instance[myMethod] = instance[myMethod].bind(instance);\n      }\n    }\n  }\n\n  /**\n   * Transforms an arbitrary string to camelCase\n   *\n   * @param  {string} str The string to transform.\n   */\n  camelCase(str: string): string {\n    if (!str) return \"\";\n\n    return str\n      .toLowerCase()\n      .trim()\n      .split(/[.\\-_\\s]/g)\n      .reduce((str, word) =>\n        word.length ? str + word[0].toUpperCase() + word.slice(1) : str\n      );\n  }\n\n  /**\n   * Split array into chunks\n   */\n  chunkArray<T>(arr: T[], size: number): T[][] {\n    return [...Array(Math.ceil(arr.length / size))].map((_, i) =>\n      arr.slice(size * i, size + size * i)\n    );\n  }\n\n  /**\n   * Escape regex input\n   */\n  escapeRegex(str: string) {\n    return str.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  }\n\n  /**\n   * Calculate caret position offset when using rtl option\n   */\n  getRtlOffset(index: number, input: string) {\n    let newIndex = index;\n    const startMarkerIndex = input.indexOf(\"\\u202B\");\n    const endMarkerIndex = input.indexOf(\"\\u202C\");\n\n    if(startMarkerIndex < index && startMarkerIndex != -1){ newIndex--; }\n    if(endMarkerIndex < index && startMarkerIndex != -1){ newIndex--; }\n\n    return newIndex < 0 ? 0 : newIndex;\n  }\n\n  /**\n   * Reusable empty function\n   */\n  static noop = () => {};\n}\n\nexport default Utilities;\n","import { KeyboardOptions, PhysicalKeyboardParams } from \"../interfaces\";\nimport Utilities from \"../services/Utilities\";\n\n/**\n * Physical Keyboard Service\n */\nclass PhysicalKeyboard {\n  getOptions: () => KeyboardOptions;\n  dispatch: any;\n\n  /**\n   * Creates an instance of the PhysicalKeyboard service\n   */\n  constructor({ dispatch, getOptions }: PhysicalKeyboardParams) {\n    /**\n     * @type {object} A simple-keyboard instance\n     */\n    this.dispatch = dispatch;\n    this.getOptions = getOptions;\n    \n    \n\n    /**\n     * Bindings\n     */\n    Utilities.bindMethods(PhysicalKeyboard, this);\n  }\n    timers: { [key: string]: NodeJS.Timeout } = {};\n\n  \n\n  handleHighlightKeyDown(e: KeyboardEvent) {\n    console.log(\"from the forked repo!\")\n    const options = this.getOptions();\n\n  if(options.physicalKeyboardHighlightPreventDefault && this.isMofifierKey(e)){\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\n\n  // Start a timer when a key is pressed\n  this.timers[buttonPressed] = setTimeout(() => {\n    // This code will be executed if the key is not released before the timer ends\n    console.log(`Long press detected for key: ${buttonPressed}`);\n\n    // Emit an event\n    this.dispatch((instance: any) => {\n      if (typeof instance.options.onLongPress === 'function') {\n        instance.options.onLongPress(buttonPressed);\n      }\n    });\n  }, 1500); \n\n    \n\n    this.dispatch((instance: any) => {\n      const standardButtonPressed = instance.getButtonElement(buttonPressed);\n      const functionButtonPressed = instance.getButtonElement(\n        `{${buttonPressed}}`\n      );\n      let buttonDOM;\n      let buttonName: string;\n\n      if (standardButtonPressed) {\n        buttonDOM = standardButtonPressed;\n        buttonName = buttonPressed;\n      } else if (functionButtonPressed) {\n        buttonDOM = functionButtonPressed;\n        buttonName = `{${buttonPressed}}`;\n      } else {\n        return;\n      }\n\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\n        buttonElement.style.background =\n          options.physicalKeyboardHighlightBgColor || \"#dadce4\";\n          buttonElement.style.color =\n          options.physicalKeyboardHighlightTextColor || \"black\";\n      }\n\n      if (buttonDOM) {\n        if(Array.isArray(buttonDOM)){\n          buttonDOM.forEach(buttonElement => applyButtonStyle(buttonElement));\n\n          // Even though we have an array of buttons, we just want to press one of them\n          if (options.physicalKeyboardHighlightPress) {\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\n              buttonDOM[0]?.onpointerdown();\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\n              buttonDOM[0]?.click();\n            } else {\n              instance.handleButtonClicked(buttonName, e);\n            }\n          }\n        } else {\n          applyButtonStyle(buttonDOM);\n\n          if (options.physicalKeyboardHighlightPress) {\n            if (options.physicalKeyboardHighlightPressUsePointerEvents) {\n              buttonDOM.onpointerdown();\n            } else if (options.physicalKeyboardHighlightPressUseClick) {\n              buttonDOM.click();\n            } else {\n              instance.handleButtonClicked(buttonName, e);\n            }\n          }\n        }\n      }\n    });\n  }\n\n  \n\n  handleHighlightKeyUp(e: KeyboardEvent) {\n    const options = this.getOptions();\n\n    if(options.physicalKeyboardHighlightPreventDefault && this.isMofifierKey(e)){\n      e.preventDefault();\n      e.stopImmediatePropagation();\n    }\n    \n    const buttonPressed = this.getSimpleKeyboardLayoutKey(e);\n\n    // // Check if a timer exists for the released key\n    // if (this.timers[buttonPressed]) {\n    //   // Clear the timer\n    //   clearTimeout(this.timers[buttonPressed]);\n\n    //   // Remove the timer from the timers object\n    //   delete this.timers[buttonPressed];\n    // }\n\n    this.dispatch((instance: any) => {\n      const buttonDOM =\n        instance.getButtonElement(buttonPressed) ||\n        instance.getButtonElement(`{${buttonPressed}}`);\n\n      const applyButtonStyle = (buttonElement: HTMLElement) => {\n        if(buttonElement.removeAttribute){\n          buttonElement.removeAttribute(\"style\");\n        }\n      };\n\n      if (buttonDOM) {\n        if(Array.isArray(buttonDOM)){\n          buttonDOM.forEach(buttonElement => applyButtonStyle(buttonElement));\n\n          // Even though we have an array of buttons, we just want to press one of them\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\n            buttonDOM[0]?.onpointerup();\n          }\n        } else {\n          applyButtonStyle(buttonDOM);\n\n          if (options.physicalKeyboardHighlightPressUsePointerEvents) {\n            buttonDOM.onpointerup();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\n   * @param  {object} e The KeyboardEvent\n   */\n  getSimpleKeyboardLayoutKey(e: KeyboardEvent) {\n    let output = \"\";\n    const keyId = e.code || e.key || this.keyCodeToKey(e?.keyCode);\n\n    if (\n      keyId?.includes(\"Numpad\") ||\n      keyId?.includes(\"Shift\") ||\n      keyId?.includes(\"Space\") ||\n      keyId?.includes(\"Backspace\") ||\n      keyId?.includes(\"Control\") ||\n      keyId?.includes(\"Alt\") ||\n      keyId?.includes(\"Meta\")\n    ) {\n      output = e.code || \"\";\n    } else {\n      output = e.key || this.keyCodeToKey(e?.keyCode) || \"\";\n    }\n\n    return output.length > 1 ? output?.toLowerCase() : output;\n  }\n\n  /**\n   * Retrieve key from keyCode\n   */\n  keyCodeToKey(keyCode: number): string {\n    return {\n      8: \"Backspace\",\n      9: \"Tab\",\n      13: \"Enter\",\n      16: \"Shift\",\n      17: \"Ctrl\",\n      18: \"Alt\",\n      19: \"Pause\",\n      20: \"CapsLock\",\n      27: \"Esc\",\n      32: \"Space\",\n      33: \"PageUp\",\n      34: \"PageDown\",\n      35: \"End\",\n      36: \"Home\",\n      37: \"ArrowLeft\",\n      38: \"ArrowUp\",\n      39: \"ArrowRight\",\n      40: \"ArrowDown\",\n      45: \"Insert\",\n      46: \"Delete\",\n      48: \"0\",\n      49: \"1\",\n      50: \"2\",\n      51: \"3\",\n      52: \"4\",\n      53: \"5\",\n      54: \"6\",\n      55: \"7\",\n      56: \"8\",\n      57: \"9\",\n      65: \"A\",\n      66: \"A\",\n      67: \"C\",\n      68: \"D\",\n      69: \"E\",\n      70: \"F\",\n      71: \"G\",\n      72: \"H\",\n      73: \"I\",\n      74: \"J\",\n      75: \"K\",\n      76: \"L\",\n      77: \"M\",\n      78: \"N\",\n      79: \"O\",\n      80: \"P\",\n      81: \"Q\",\n      82: \"R\",\n      83: \"S\",\n      84: \"T\",\n      85: \"U\",\n      86: \"V\",\n      87: \"W\",\n      88: \"X\",\n      89: \"Y\",\n      90: \"Z\",\n      91: \"Meta\",\n      96: \"Numpad0\",\n      97: \"Numpad1\",\n      98: \"Numpad2\",\n      99: \"Numpad3\",\n      100: \"Numpad4\",\n      101: \"Numpad5\",\n      102: \"Numpad6\",\n      103: \"Numpad7\",\n      104: \"Numpad8\",\n      105: \"Numpad9\",\n      106: \"NumpadMultiply\",\n      107: \"NumpadAdd\",\n      109: \"NumpadSubtract\",\n      110: \"NumpadDecimal\",\n      111: \"NumpadDivide\",\n      112: \"F1\",\n      113: \"F2\",\n      114: \"F3\",\n      115: \"F4\",\n      116: \"F5\",\n      117: \"F6\",\n      118: \"F7\",\n      119: \"F8\",\n      120: \"F9\",\n      121: \"F10\",\n      122: \"F11\",\n      123: \"F12\",\n      144: \"NumLock\",\n      145: \"ScrollLock\",\n      186: \";\",\n      187: \"=\",\n      188: \",\",\n      189: \"-\",\n      190: \".\",\n      191: \"/\",\n      192: \"`\",\n      219: \"[\",\n      220: \"\\\\\",\n      221: \"]\",\n      222: \"'\",\n    }[keyCode] || \"\";\n  }\n\n  isMofifierKey = (e: KeyboardEvent): boolean => {\n    return (\n      e.altKey\n      || e.ctrlKey\n      || e.shiftKey\n      || [\"Tab\", \"CapsLock\", \"Esc\", \"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"].includes(\n        e.code || e.key || this.keyCodeToKey(e?.keyCode)\n      )\n    )\n  }\n}\n\nexport default PhysicalKeyboard;\n","import \"./css/CandidateBox.css\";\n\nimport Utilities from \"../services/Utilities\";\nimport {\n  CandidateBoxParams,\n  CandidateBoxRenderParams,\n  CandidateBoxShowParams,\n  KeyboardOptions,\n} from \"./../interfaces\";\n\nclass CandidateBox {\n  utilities: Utilities;\n  options: KeyboardOptions;\n  candidateBoxElement!: HTMLDivElement;\n  pageIndex = 0;\n  pageSize: number;\n\n  constructor({ utilities, options }: CandidateBoxParams) {\n    this.utilities = utilities;\n    this.options = options;\n    Utilities.bindMethods(CandidateBox, this);\n    this.pageSize = this.utilities.getOptions().layoutCandidatesPageSize || 5;\n  }\n\n  destroy() {\n    if (this.candidateBoxElement) {\n      this.candidateBoxElement.remove();\n      this.pageIndex = 0;\n    }\n  }\n\n  show({\n    candidateValue,\n    targetElement,\n    onSelect,\n  }: CandidateBoxShowParams): void {\n    if (!candidateValue || !candidateValue.length) {\n      return;\n    }\n\n    const candidateListPages = this.utilities.chunkArray(\n      candidateValue.split(\" \"),\n      this.pageSize\n    );\n\n    this.renderPage({\n      candidateListPages,\n      targetElement,\n      pageIndex: this.pageIndex,\n      nbPages: candidateListPages.length,\n      onItemSelected: (selectedCandidate: string, e: MouseEvent) => {\n        onSelect(selectedCandidate, e);\n        this.destroy();\n      },\n    });\n  }\n\n  renderPage({\n    candidateListPages,\n    targetElement,\n    pageIndex,\n    nbPages,\n    onItemSelected,\n  }: CandidateBoxRenderParams) {\n    // Remove current candidate box, if any\n    this.candidateBoxElement?.remove();\n\n    // Create candidate box element\n    this.candidateBoxElement = document.createElement(\"div\");\n    this.candidateBoxElement.className = \"hg-candidate-box\";\n\n    // Candidate box list\n    const candidateListULElement = document.createElement(\"ul\");\n    candidateListULElement.className = \"hg-candidate-box-list\";\n\n    // Create Candidate box list items\n    candidateListPages[pageIndex].forEach((candidateListItem) => {\n      const candidateListLIElement = document.createElement(\"li\");\n      const getMouseEvent = () => {\n        const mouseEvent = new (this.options.useTouchEvents ? TouchEvent : MouseEvent)(\"click\");\n        Object.defineProperty(mouseEvent, \"target\", {\n          value: candidateListLIElement,\n        });\n        return mouseEvent;\n      };\n\n      candidateListLIElement.className = \"hg-candidate-box-list-item\";\n      candidateListLIElement.innerHTML = this.options.display?.[candidateListItem] || candidateListItem;\n\n      if(this.options.useTouchEvents) {\n        candidateListLIElement.ontouchstart = (e: any) =>\n          onItemSelected(candidateListItem, e || getMouseEvent());\n      } else {\n        candidateListLIElement.onclick = (e = getMouseEvent() as MouseEvent) =>\n          onItemSelected(candidateListItem, e);\n      }\n\n      // Append list item to ul\n      candidateListULElement.appendChild(candidateListLIElement);\n    });\n\n    // Add previous button\n    const isPrevBtnElementActive = pageIndex > 0;\n    const prevBtnElement = document.createElement(\"div\");\n    prevBtnElement.classList.add(\"hg-candidate-box-prev\");\n    isPrevBtnElementActive &&\n      prevBtnElement.classList.add(\"hg-candidate-box-btn-active\");\n\n    const prevBtnElementClickAction = () => {\n      if (!isPrevBtnElementActive) return;\n      this.renderPage({\n        candidateListPages,\n        targetElement,\n        pageIndex: pageIndex - 1,\n        nbPages,\n        onItemSelected,\n      });\n    };\n\n    if(this.options.useTouchEvents) {\n      prevBtnElement.ontouchstart = prevBtnElementClickAction;\n    } else {\n      prevBtnElement.onclick = prevBtnElementClickAction;\n    }\n    \n    this.candidateBoxElement.appendChild(prevBtnElement);\n\n    // Add elements to container\n    this.candidateBoxElement.appendChild(candidateListULElement);\n\n    // Add next button\n    const isNextBtnElementActive = pageIndex < nbPages - 1;\n    const nextBtnElement = document.createElement(\"div\");\n    nextBtnElement.classList.add(\"hg-candidate-box-next\");\n    isNextBtnElementActive &&\n      nextBtnElement.classList.add(\"hg-candidate-box-btn-active\");\n\n    const nextBtnElementClickAction = () => {\n      if (!isNextBtnElementActive) return;\n      this.renderPage({\n        candidateListPages,\n        targetElement,\n        pageIndex: pageIndex + 1,\n        nbPages,\n        onItemSelected,\n      });\n    };\n\n    if(this.options.useTouchEvents) {\n      nextBtnElement.ontouchstart = nextBtnElementClickAction;\n    } else {\n      nextBtnElement.onclick = nextBtnElementClickAction;\n    }\n\n    this.candidateBoxElement.appendChild(nextBtnElement);\n\n    // Append candidate box to target element\n    targetElement.prepend(this.candidateBoxElement);\n  }\n}\n\nexport default CandidateBox;\n","import \"./css/Keyboard.css\";\n\n// Services\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\nimport Utilities from \"../services/Utilities\";\nimport {\n  KeyboardOptions,\n  KeyboardInput,\n  KeyboardButtonElements,\n  KeyboardHandlerEvent,\n  KeyboardElement,\n} from \"../interfaces\";\nimport CandidateBox from \"./CandidateBox\";\n\n/**\n * Root class for simple-keyboard.\n * This class:\n * - Parses the options\n * - Renders the rows and buttons\n * - Handles button functionality\n */\nclass SimpleKeyboard {\n  input!: KeyboardInput;\n  options!: KeyboardOptions;\n  utilities!: Utilities;\n  caretPosition!: number | null;\n  caretPositionEnd!: number | null;\n  keyboardDOM!: KeyboardElement;\n  keyboardPluginClasses!: string;\n  keyboardDOMClass!: string;\n  buttonElements!: KeyboardButtonElements;\n  currentInstanceName!: string;\n  allKeyboardInstances!: { [key: string]: SimpleKeyboard };\n  keyboardInstanceNames!: string[];\n  isFirstKeyboardInstance!: boolean;\n  physicalKeyboard!: PhysicalKeyboard;\n  modules!: { [key: string]: any };\n  activeButtonClass!: string;\n  holdInteractionTimeout!: number;\n  holdTimeout!: number;\n  isMouseHold!: boolean;\n  initialized!: boolean;\n  candidateBox!: CandidateBox | null;\n  keyboardRowsDOM!: KeyboardElement;\n  defaultName = \"default\";\n  activeInputElement: HTMLInputElement | HTMLTextAreaElement | null = null;\n\n  /**\n   * Creates an instance of SimpleKeyboard\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\n   */\n  constructor(\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\n    keyboardOptions?: KeyboardOptions\n  ) {\n    if (typeof window === \"undefined\") return;\n\n    const {\n      keyboardDOMClass,\n      keyboardDOM,\n      options = {},\n    } = this.handleParams(selectorOrOptions, keyboardOptions);\n\n    /**\n     * Initializing Utilities\n     */\n    this.utilities = new Utilities({\n      getOptions: this.getOptions,\n      getCaretPosition: this.getCaretPosition,\n      getCaretPositionEnd: this.getCaretPositionEnd,\n      dispatch: this.dispatch,\n    });\n\n    /**\n     * Caret position\n     */\n    this.caretPosition = null;\n\n    /**\n     * Caret position end\n     */\n    this.caretPositionEnd = null;\n\n    /**\n     * Processing options\n     */\n    this.keyboardDOM = keyboardDOM;\n\n    /**\n     * @type {object}\n     * @property {object} layout Modify the keyboard layout.\n     * @property {string} layoutName Specifies which layout should be used.\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\n     * @property {array} buttonTheme A prop to add your own css classes to one or several buttons.\n     * @property {array} buttonAttributes A prop to add your own attributes to one or several buttons.\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\n     * @property {boolean} physicalKeyboardHighlightPress Presses keys highlighted by physicalKeyboardHighlight\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\n     * @property {boolean} physicalKeyboardHighlightPressUseClick Whether physicalKeyboardHighlightPress should use clicks to trigger buttons.\n     * @property {boolean} physicalKeyboardHighlightPressUsePointerEvents Whether physicalKeyboardHighlightPress should use pointer events to trigger buttons.\n     * @property {boolean} physicalKeyboardHighlightPreventDefault Whether physicalKeyboardHighlight should use preventDefault to disable default browser actions.\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\n     * @property {boolean} preventMouseUpDefault Calling preventDefault for the mouseup events.\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\n     * @property {boolean} stopMouseUpPropagation Stops pointer up events on simple-keyboard buttons from bubbling to parent elements.\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\n     * @property {boolean} disableButtonHold Disable button hold action.\n     * @property {boolean} rtl Adds unicode right-to-left control characters to input return values.\n     * @property {function} onKeyReleased Executes the callback function on key release.\n     * @property {array} modules Module classes to be loaded by simple-keyboard.\n     * @property {boolean} enableLayoutCandidates Enable input method editor candidate list support.\n     * @property {object} excludeFromLayout Buttons to exclude from layout\n     * @property {number} layoutCandidatesPageSize Determines size of layout candidate list\n     * @property {boolean} layoutCandidatesCaseSensitiveMatch Determines whether layout candidate match should be case sensitive.\n     * @property {boolean} disableCandidateNormalization Disables the automatic normalization for selected layout candidates\n     * @property {boolean} enableLayoutCandidatesKeyPress Enables onKeyPress triggering for layoutCandidate items\n     */\n    this.options = {\n      layoutName: \"default\",\n      theme: \"hg-theme-default\",\n      inputName: \"default\",\n      preventMouseDownDefault: false,\n      enableLayoutCandidates: true,\n      excludeFromLayout: {},\n      ...options,\n    };\n\n    /**\n     * @type {object} Classes identifying loaded plugins\n     */\n    this.keyboardPluginClasses = \"\";\n\n    /**\n     * Bindings\n     */\n    Utilities.bindMethods(SimpleKeyboard, this);\n\n    /**\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\n     * @example\n     * // To get entered input\n     * const input = keyboard.getInput();\n     *\n     * // To clear entered input.\n     * keyboard.clearInput();\n     *\n     * @type {object}\n     * @property {object} default Default SimpleKeyboard internal input.\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\n     */\n    const { inputName = this.defaultName } = this.options;\n    this.input = {};\n    this.input[inputName] = \"\";\n\n    /**\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\n     */\n    this.keyboardDOMClass = keyboardDOMClass;\n\n    /**\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\n     */\n    this.buttonElements = {};\n\n    /**\n     * Simple-keyboard Instances\n     * This enables multiple simple-keyboard support with easier management\n     */\n    if (!window[\"SimpleKeyboardInstances\"])\n      window[\"SimpleKeyboardInstances\"] = {};\n\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\n    window[\"SimpleKeyboardInstances\"][this.currentInstanceName] = this;\n\n    /**\n     * Instance vars\n     */\n    this.allKeyboardInstances = window[\"SimpleKeyboardInstances\"];\n    this.keyboardInstanceNames = Object.keys(window[\"SimpleKeyboardInstances\"]);\n    this.isFirstKeyboardInstance =\n      this.keyboardInstanceNames[0] === this.currentInstanceName;\n\n    /**\n     * Physical Keyboard support\n     */\n    this.physicalKeyboard = new PhysicalKeyboard({\n      dispatch: this.dispatch,\n      getOptions: this.getOptions,\n    });\n\n    /**\n     * Initializing CandidateBox\n     */\n    this.candidateBox = this.options.enableLayoutCandidates\n      ? new CandidateBox({\n          utilities: this.utilities,\n          options: this.options,\n        })\n      : null;\n\n    /**\n     * Rendering keyboard\n     */\n    if (this.keyboardDOM) this.render();\n    else {\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\n    }\n\n    /**\n     * Modules\n     */\n    this.modules = {};\n    this.loadModules();\n  }\n\n  /**\n   * parseParams\n   */\n  handleParams = (\n    selectorOrOptions?: string | HTMLDivElement | KeyboardOptions,\n    keyboardOptions?: KeyboardOptions\n  ): {\n    keyboardDOMClass: string;\n    keyboardDOM: KeyboardElement;\n    options: Partial<KeyboardOptions | undefined>;\n  } => {\n    let keyboardDOMClass;\n    let keyboardDOM;\n    let options;\n\n    /**\n     * If first parameter is a string:\n     * Consider it as an element's class\n     */\n    if (typeof selectorOrOptions === \"string\") {\n      keyboardDOMClass = selectorOrOptions.split(\".\").join(\"\");\n      keyboardDOM = document.querySelector(\n        `.${keyboardDOMClass}`\n      ) as KeyboardElement;\n      options = keyboardOptions;\n\n      /**\n       * If first parameter is an KeyboardElement\n       * Consider it as the keyboard DOM element\n       */\n    } else if (selectorOrOptions instanceof HTMLDivElement) {\n      /**\n       * This element must have a class, otherwise throw\n       */\n      if (!selectorOrOptions.className) {\n        console.warn(\"Any DOM element passed as parameter must have a class.\");\n        throw new Error(\"KEYBOARD_DOM_CLASS_ERROR\");\n      }\n\n      keyboardDOMClass = selectorOrOptions.className.split(\" \")[0];\n      keyboardDOM = selectorOrOptions;\n      options = keyboardOptions;\n\n      /**\n       * Otherwise, search for .simple-keyboard DOM element\n       */\n    } else {\n      keyboardDOMClass = \"simple-keyboard\";\n      keyboardDOM = document.querySelector(\n        `.${keyboardDOMClass}`\n      ) as KeyboardElement;\n      options = selectorOrOptions;\n    }\n\n    return {\n      keyboardDOMClass,\n      keyboardDOM,\n      options,\n    };\n  };\n\n  /**\n   * Getters\n   */\n  getOptions = (): KeyboardOptions => this.options;\n  getCaretPosition = (): number | null => this.caretPosition;\n  getCaretPositionEnd = (): number | null => this.caretPositionEnd;\n\n  /**\n   * Changes the internal caret position\n   * @param {number} position The caret's start position\n   * @param {number} positionEnd The caret's end position\n   */\n  setCaretPosition(position: number | null, endPosition = position): void {\n    this.caretPosition = position;\n    this.caretPositionEnd = endPosition;\n  }\n\n  /**\n   * Retrieve the candidates for a given input\n   * @param input The input string to check\n   */\n  getInputCandidates(\n    input: string\n  ): { candidateKey: string; candidateValue: string } | Record<string, never> {\n    const {\n      layoutCandidates: layoutCandidatesObj,\n      layoutCandidatesCaseSensitiveMatch,\n    } = this.options;\n\n    if (!layoutCandidatesObj || typeof layoutCandidatesObj !== \"object\") {\n      return {};\n    }\n\n    const layoutCandidates = Object.keys(layoutCandidatesObj).filter(\n      (layoutCandidate: string) => {\n        const inputSubstr =\n          input.substring(0, this.getCaretPositionEnd() || 0) || input;\n        const regexp = new RegExp(\n          `${this.utilities.escapeRegex(layoutCandidate)}$`,\n          layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\n        );\n        const matches = [...inputSubstr.matchAll(regexp)];\n        return !!matches.length;\n      }\n    );\n\n    if (layoutCandidates.length > 1) {\n      const candidateKey = layoutCandidates.sort(\n        (a, b) => b.length - a.length\n      )[0];\n      return {\n        candidateKey,\n        candidateValue: layoutCandidatesObj[candidateKey],\n      };\n    } else if (layoutCandidates.length) {\n      const candidateKey = layoutCandidates[0];\n      return {\n        candidateKey,\n        candidateValue: layoutCandidatesObj[candidateKey],\n      };\n    } else {\n      return {};\n    }\n  }\n\n  /**\n   * Shows a suggestion box with a list of candidate words\n   * @param candidates The chosen candidates string as defined in the layoutCandidates option\n   * @param targetElement The element next to which the candidates box will be shown\n   */\n  showCandidatesBox(\n    candidateKey: string,\n    candidateValue: string,\n    targetElement: KeyboardElement\n  ): void {\n    if (this.candidateBox) {\n      this.candidateBox.show({\n        candidateValue,\n        targetElement,\n        onSelect: (selectedCandidate: string, e: MouseEvent) => {\n          const {\n            layoutCandidatesCaseSensitiveMatch,\n            disableCandidateNormalization,\n            enableLayoutCandidatesKeyPress\n          } = this.options;\n\n          let candidateStr = selectedCandidate;\n\n          if(!disableCandidateNormalization) {\n            /**\n             * Making sure that our suggestions are not composed characters\n             */\n            candidateStr = selectedCandidate.normalize(\"NFD\");\n          }\n\n          const currentInput = this.getInput(this.options.inputName, true);\n          const initialCaretPosition = this.getCaretPositionEnd() || 0;\n          const inputSubstr =\n            currentInput.substring(0, initialCaretPosition || 0) ||\n            currentInput;\n\n          const regexp = new RegExp(\n            `${this.utilities.escapeRegex(candidateKey)}$`,\n            layoutCandidatesCaseSensitiveMatch ? \"g\" : \"gi\"\n          );\n          const newInputSubstr = inputSubstr.replace(\n            regexp,\n            candidateStr\n          );\n          const newInput = currentInput.replace(inputSubstr, newInputSubstr);\n\n          const caretPositionDiff = newInputSubstr.length - inputSubstr.length;\n          let newCaretPosition =\n            (initialCaretPosition || currentInput.length) + caretPositionDiff;\n\n          if (newCaretPosition < 0) newCaretPosition = 0;\n\n          this.setInput(newInput, this.options.inputName, true);\n          this.setCaretPosition(newCaretPosition);\n\n          /**\n           * Calling onKeyPress\n           * We pass in the composed candidate instead of the decomposed one\n           * To prevent confusion for users\n           */\n          if (enableLayoutCandidatesKeyPress && typeof this.options.onKeyPress === \"function\")\n            this.options.onKeyPress(selectedCandidate, e);\n\n          if (typeof this.options.onChange === \"function\")\n            this.options.onChange(\n              this.getInput(this.options.inputName, true),\n              e\n            );\n\n          /**\n           * Calling onChangeAll\n           */\n          if (typeof this.options.onChangeAll === \"function\")\n            this.options.onChangeAll(this.getAllInputs(), e);\n        },\n      });\n    }\n  }\n\n  /**\n   * Handles clicks made to keyboard buttons\n   * @param  {string} button The button's layout name.\n   */\n  handleButtonClicked(button: string, e?: KeyboardHandlerEvent): void {\n    const { inputName = this.defaultName, debug } = this.options;\n    /**\n     * Ignoring placeholder buttons\n     */\n    if (button === \"{//}\") return;\n\n    /**\n     * Creating inputName if it doesn't exist\n     */\n    if (!this.input[inputName]) this.input[inputName] = \"\";\n\n    /**\n     * Calculating new input\n     */\n    const updatedInput = this.utilities.getUpdatedInput(\n      button,\n      this.input[inputName],\n      this.caretPosition,\n      this.caretPositionEnd\n    );\n\n    /**\n     * EDGE CASE: Check for whole input selection changes that will yield same updatedInput\n     */\n    if (this.utilities.isStandardButton(button) && this.activeInputElement) {\n      const isEntireInputSelection =\n        this.input[inputName] &&\n        this.input[inputName] === updatedInput &&\n        this.caretPosition === 0 &&\n        this.caretPositionEnd === updatedInput.length;\n\n      if (isEntireInputSelection) {\n        this.setInput(\"\", this.options.inputName, true);\n        this.setCaretPosition(0);\n        this.activeInputElement.value = \"\";\n        this.activeInputElement.setSelectionRange(0, 0);\n        this.handleButtonClicked(button, e);\n        return;\n      }\n    }\n\n    /**\n     * Calling onKeyPress\n     */\n    if (typeof this.options.onKeyPress === \"function\")\n      this.options.onKeyPress(button, e);\n\n     // Check if this was a long press\n    if (this.isMouseHold) {\n    // If it was a long press, call the onLongPress function if it's defined\n    if (typeof this.options.onLongPress === \"function\") {\n      this.options.onLongPress(button, e);\n      }\n    } else {\n\n    if (\n      // If input will change as a result of this button press\n      this.input[inputName] !== updatedInput &&\n      // This pertains to the \"inputPattern\" option:\n      // If inputPattern isn't set\n      (!this.options.inputPattern ||\n        // Or, if it is set and if the pattern is valid - we proceed.\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\n    ) {\n      /**\n       * If maxLength and handleMaxLength yield true, halting\n       */\n      if (\n        this.options.maxLength &&\n        this.utilities.handleMaxLength(this.input, updatedInput)\n      ) {\n        return;\n      }\n    }\n\n      /**\n       * Updating input\n       */\n      const newInputValue = this.utilities.getUpdatedInput(\n        button,\n        this.input[inputName],\n        this.caretPosition,\n        this.caretPositionEnd,\n        true\n      );\n\n      this.setInput(newInputValue, this.options.inputName, true);\n\n      if (debug) console.log(\"Input changed:\", this.getAllInputs());\n\n      if (this.options.debug) {\n        console.log(\n          \"Caret at: \",\n          this.getCaretPosition(),\n          this.getCaretPositionEnd(),\n          `(${this.keyboardDOMClass})`,\n          e?.type\n        );\n      }\n\n      /**\n       * Enforce syncInstanceInputs, if set\n       */\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\n\n      /**\n       * Calling onChange\n       */\n      if (typeof this.options.onChange === \"function\")\n        this.options.onChange(this.getInput(this.options.inputName, true), e);\n\n      /**\n       * Calling onChangeAll\n       */\n      if (typeof this.options.onChangeAll === \"function\")\n        this.options.onChangeAll(this.getAllInputs(), e);\n\n      /**\n       * Check if this new input has candidates (suggested words)\n       */\n      if (e?.target && this.options.enableLayoutCandidates) {\n        const { candidateKey, candidateValue } =\n          this.getInputCandidates(updatedInput);\n\n        if (candidateKey && candidateValue) {\n          this.showCandidatesBox(\n            candidateKey,\n            candidateValue,\n            this.keyboardDOM\n          );\n        } else {\n          this.candidateBox?.destroy();\n        }\n      }\n    }\n\n    /**\n     * After a button is clicked the selection (if any) will disappear\n     * we should reflect this in our state, as applicable\n     */\n    if(this.caretPositionEnd && this.caretPosition !== this.caretPositionEnd){\n      this.setCaretPosition(this.caretPositionEnd, this.caretPositionEnd);\n\n      if(this.activeInputElement){\n        this.activeInputElement.setSelectionRange(this.caretPositionEnd, this.caretPositionEnd);\n      }\n      \n      if(this.options.debug){\n        console.log(\"Caret position aligned\", this.caretPosition);\n      }\n    }\n\n    if (debug) {\n      console.log(\"Key pressed:\", button);\n    }\n  }\n\n  /**\n   * Get mouse hold state\n   */\n  getMouseHold() {\n    return this.isMouseHold;\n  }\n\n  /**\n   * Mark mouse hold state as set\n   */\n  setMouseHold(value: boolean) {\n    if (this.options.syncInstanceInputs) {\n      this.dispatch((instance: SimpleKeyboard) => {\n        instance.isMouseHold = value;\n      });\n    } else {\n      this.isMouseHold = value;\n    }\n  }\n\n  /**\n   * Handles button mousedown\n   */\n  /* istanbul ignore next */\n  handleButtonMouseDown(button: string, e: KeyboardHandlerEvent): void {\n    if (e) {\n      /**\n       * Handle event options\n       */\n      if (this.options.preventMouseDownDefault) e.preventDefault();\n      if (this.options.stopMouseDownPropagation) e.stopPropagation();\n\n      /**\n       * Add active class\n       */\n      e.target.classList.add(this.activeButtonClass);\n    }\n\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\n\n    /**\n   * @type {object} Timeout dictating the speed of key hold iterations\n   */\n  this.holdInteractionTimeout = window.setTimeout(() => {\n    if (this.getMouseHold()) {\n      this.handleButtonClicked(button);\n      \n      // Call the onLongPress function if it's defined\n      if (typeof this.options.onLongPress === \"function\") {\n        this.options.onLongPress(button);\n      }\n\n      this.handleButtonHold(button);\n    } else {\n      clearTimeout(this.holdInteractionTimeout);\n    }\n  }, 100);\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\n\n    /**\n     * @type {boolean} Whether the mouse is being held onKeyPress\n     */\n    this.setMouseHold(true);\n\n    /**\n     * @type {object} Time to wait until a key hold is detected\n     */\n    if (!this.options.disableButtonHold) {\n      this.holdTimeout = window.setTimeout(() => {\n        if (\n          (this.getMouseHold() &&\n            // TODO: This needs to be configurable through options\n            ((!button.includes(\"{\") && !button.includes(\"}\")) ||\n              button === \"{delete}\" ||\n              button === \"{backspace}\" ||\n              button === \"{bksp}\" ||\n              button === \"{space}\" ||\n              button === \"{tab}\")) ||\n          button === \"{arrowright}\" ||\n          button === \"{arrowleft}\" ||\n          button === \"{arrowup}\" ||\n          button === \"{arrowdown}\"\n        ) {\n          if (this.options.debug) console.log(\"Button held:\", button);\n\n          this.handleButtonHold(button);\n        }\n        clearTimeout(this.holdTimeout);\n      }, 500);\n    }\n  }\n\n  /**\n   * Handles button mouseup\n   */\n  handleButtonMouseUp(button?: string, e?: KeyboardHandlerEvent): void {\n    if (e) {\n      /**\n       * Handle event options\n       */\n      if (this.options.preventMouseUpDefault && e.preventDefault)\n        e.preventDefault();\n      if (this.options.stopMouseUpPropagation && e.stopPropagation)\n        e.stopPropagation();\n\n      /* istanbul ignore next */\n      const isKeyboard =\n        e.target === this.keyboardDOM ||\n        (e.target && this.keyboardDOM.contains(e.target)) ||\n        (this.candidateBox &&\n          this.candidateBox.candidateBoxElement &&\n          (e.target === this.candidateBox.candidateBoxElement ||\n            (e.target &&\n              this.candidateBox.candidateBoxElement.contains(e.target))));\n\n      /**\n       * On click outside, remove candidateBox\n       */\n      if (!isKeyboard && this.candidateBox) {\n        this.candidateBox.destroy();\n      }\n    }\n\n    /**\n     * Remove active class\n     */\n    this.recurseButtons((buttonElement: Element) => {\n      buttonElement.classList.remove(this.activeButtonClass);\n    });\n\n    this.setMouseHold(false);\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\n\n    /**\n     * Calling onKeyReleased\n     */\n    if (button && typeof this.options.onKeyReleased === \"function\")\n      this.options.onKeyReleased(button, e);\n  }\n\n  /**\n   * Handles container mousedown\n   */\n  handleKeyboardContainerMouseDown(e: KeyboardHandlerEvent): void {\n    /**\n     * Handle event options\n     */\n    if (this.options.preventMouseDownDefault) e.preventDefault();\n  }\n\n  /**\n   * Handles button hold\n   */\n  /* istanbul ignore next */\n  handleButtonHold(button: string): void {\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\n\n    /**\n     * @type {object} Timeout dictating the speed of key hold iterations\n     */\n    this.holdInteractionTimeout = window.setTimeout(() => {\n      if (this.getMouseHold()) {\n        this.handleButtonClicked(button);\n        this.handleButtonHold(button);\n      } else {\n        clearTimeout(this.holdInteractionTimeout);\n      }\n    }, 100);\n  }\n\n  /**\n   * Send a command to all simple-keyboard instances (if you have several instances).\n   */\n  syncInstanceInputs(): void {\n    this.dispatch((instance: SimpleKeyboard) => {\n      instance.replaceInput(this.input);\n      instance.setCaretPosition(this.caretPosition, this.caretPositionEnd);\n    });\n  }\n\n  /**\n   * Clear the keyboard’s input.\n   * @param {string} [inputName] optional - the internal input to select\n   */\n  clearInput(\n    inputName: string = this.options.inputName || this.defaultName\n  ): void {\n    this.input[inputName] = \"\";\n\n    /**\n     * Reset caretPosition\n     */\n    this.setCaretPosition(0);\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\n  }\n\n  /**\n   * Get the keyboard’s input (You can also get it from the onChange prop).\n   * @param  {string} [inputName] optional - the internal input to select\n   */\n  getInput(\n    inputName: string = this.options.inputName || this.defaultName,\n    skipSync = false\n  ): string {\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if (this.options.syncInstanceInputs && !skipSync) this.syncInstanceInputs();\n\n    if (this.options.rtl) {\n      // Remove existing control chars\n      const inputWithoutRTLControl = this.input[inputName]\n        .replace(\"\\u202B\", \"\")\n        .replace(\"\\u202C\", \"\");\n\n      return \"\\u202B\" + inputWithoutRTLControl + \"\\u202C\";\n    } else {\n      return this.input[inputName];\n    }\n  }\n\n  /**\n   * Get all simple-keyboard inputs\n   */\n  getAllInputs(): KeyboardInput {\n    const output = {};\n    const inputNames = Object.keys(this.input);\n\n    inputNames.forEach((inputName) => {\n      output[inputName] = this.getInput(inputName, true);\n    });\n\n    return output;\n  }\n\n  /**\n   * Set the keyboard’s input.\n   * @param  {string} input the input value\n   * @param  {string} inputName optional - the internal input to select\n   */\n  setInput(\n    input: string,\n    inputName: string = this.options.inputName || this.defaultName,\n    skipSync?: boolean\n  ): void {\n    this.input[inputName] = input;\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if (!skipSync && this.options.syncInstanceInputs) this.syncInstanceInputs();\n  }\n\n  /**\n   * Replace the input object (`keyboard.input`)\n   * @param  {object} inputObj The input object\n   */\n  replaceInput(inputObj: KeyboardInput): void {\n    this.input = inputObj;\n  }\n\n  /**\n   * Set new option or modify existing ones after initialization.\n   * @param  {object} options The options to set\n   */\n  setOptions(options = {}): void {\n    const changedOptions = this.changedOptions(options);\n    this.options = Object.assign(this.options, options);\n\n    if (changedOptions.length) {\n      if (this.options.debug) {\n        console.log(\"changedOptions\", changedOptions);\n      }\n\n      /**\n       * Some option changes require adjustments before re-render\n       */\n      this.onSetOptions(changedOptions);\n\n      /**\n       * Rendering\n       */\n      this.render();\n    }\n  }\n\n  /**\n   * Detecting changes to non-function options\n   * This allows us to ascertain whether a button re-render is needed\n   */\n  changedOptions(newOptions: Partial<KeyboardOptions>): string[] {\n    return Object.keys(newOptions).filter(\n      (optionName) =>\n        JSON.stringify(newOptions[optionName]) !==\n        JSON.stringify(this.options[optionName])\n    );\n  }\n\n  /**\n   * Executing actions depending on changed options\n   * @param  {object} options The options to set\n   */\n  onSetOptions(changedOptions: string[] = []): void {\n    /**\n     * Changed: layoutName\n     */\n    if (changedOptions.includes(\"layoutName\")) {\n      /**\n       * Reset candidateBox\n       */\n      if (this.candidateBox) {\n        this.candidateBox.destroy();\n      }\n    }\n\n    /**\n     * Changed: layoutCandidatesPageSize, layoutCandidates\n     */\n    if (\n      changedOptions.includes(\"layoutCandidatesPageSize\") ||\n      changedOptions.includes(\"layoutCandidates\")\n    ) {\n      /**\n       * Reset and recreate candidateBox\n       */\n      if (this.candidateBox) {\n        this.candidateBox.destroy();\n        this.candidateBox = new CandidateBox({\n          utilities: this.utilities,\n          options: this.options,\n        });\n      }\n    }\n  }\n\n  /**\n   * Remove all keyboard rows and reset keyboard values.\n   * Used internally between re-renders.\n   */\n  resetRows(): void {\n    if (this.keyboardRowsDOM) {\n      this.keyboardRowsDOM.remove();\n    }\n\n    this.keyboardDOM.className = this.keyboardDOMClass;\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\n    this.buttonElements = {};\n  }\n\n  /**\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\n   */\n  // eslint-disable-next-line no-unused-vars\n  dispatch(callback: (instance: SimpleKeyboard, key?: string) => void): void {\n    if (!window[\"SimpleKeyboardInstances\"]) {\n      console.warn(\n        `SimpleKeyboardInstances is not defined. Dispatch cannot be called.`\n      );\n      throw new Error(\"INSTANCES_VAR_ERROR\");\n    }\n\n    return Object.keys(window[\"SimpleKeyboardInstances\"]).forEach((key) => {\n      callback(window[\"SimpleKeyboardInstances\"][key], key);\n    });\n  }\n\n  /**\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\n   * @param  {string} buttons List of buttons to select (separated by a space).\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\n   */\n  addButtonTheme(buttons: string, className: string): void {\n    if (!className || !buttons) return;\n\n    buttons.split(\" \").forEach((button) => {\n      className.split(\" \").forEach((classNameItem) => {\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\n\n        let classNameFound = false;\n\n        /**\n         * If class is already defined, we add button to class definition\n         */\n        this.options.buttonTheme.map((buttonTheme) => {\n          if (buttonTheme?.class.split(\" \").includes(classNameItem)) {\n            classNameFound = true;\n\n            const buttonThemeArray = buttonTheme.buttons.split(\" \");\n            if (!buttonThemeArray.includes(button)) {\n              classNameFound = true;\n              buttonThemeArray.push(button);\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\n            }\n          }\n          return buttonTheme;\n        });\n\n        /**\n         * If class is not defined, we create a new entry\n         */\n        if (!classNameFound) {\n          this.options.buttonTheme.push({\n            class: classNameItem,\n            buttons: buttons,\n          });\n        }\n      });\n    });\n\n    this.render();\n  }\n\n  /**\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\n   * @param  {string} buttons List of buttons to select (separated by a space).\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\n   */\n  removeButtonTheme(buttons: string, className: string): void {\n    /**\n     * When called with empty parameters, remove all button themes\n     */\n    if (!buttons && !className) {\n      this.options.buttonTheme = [];\n      this.render();\n      return;\n    }\n\n    /**\n     * If buttons are passed and buttonTheme has items\n     */\n    if (\n      buttons &&\n      Array.isArray(this.options.buttonTheme) &&\n      this.options.buttonTheme.length\n    ) {\n      const buttonArray = buttons.split(\" \");\n      buttonArray.forEach((button) => {\n        this.options?.buttonTheme?.map((buttonTheme, index) => {\n          /**\n           * If className is set, we affect the buttons only for that class\n           * Otherwise, we afect all classes\n           */\n          if (\n            (buttonTheme &&\n              className &&\n              className.includes(buttonTheme.class)) ||\n            !className\n          ) {\n            const filteredButtonArray = buttonTheme?.buttons\n              .split(\" \")\n              .filter((item) => item !== button);\n\n            /**\n             * If buttons left, return them, otherwise, remove button Theme\n             */\n            if (buttonTheme && filteredButtonArray?.length) {\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\n            } else {\n              this.options.buttonTheme?.splice(index, 1);\n              buttonTheme = null;\n            }\n          }\n\n          return buttonTheme;\n        });\n      });\n\n      this.render();\n    }\n  }\n\n  /**\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\n   * @param  {string} button The button layout name to select\n   */\n  getButtonElement(\n    button: string\n  ): KeyboardElement | KeyboardElement[] | undefined {\n    let output;\n\n    const buttonArr = this.buttonElements[button];\n    if (buttonArr) {\n      if (buttonArr.length > 1) {\n        output = buttonArr;\n      } else {\n        output = buttonArr[0];\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * This handles the \"inputPattern\" option\n   * by checking if the provided inputPattern passes\n   */\n  inputPatternIsValid(inputVal: string): boolean {\n    const inputPatternRaw = this.options.inputPattern;\n    let inputPattern;\n\n    /**\n     * Check if input pattern is global or targeted to individual inputs\n     */\n    if (inputPatternRaw instanceof RegExp) {\n      inputPattern = inputPatternRaw;\n    } else {\n      inputPattern =\n        inputPatternRaw[this.options.inputName || this.defaultName];\n    }\n\n    if (inputPattern && inputVal) {\n      const didInputMatch = inputPattern.test(inputVal);\n\n      if (this.options.debug) {\n        console.log(\n          `inputPattern (\"${inputPattern}\"): ${\n            didInputMatch ? \"passed\" : \"did not pass!\"\n          }`\n        );\n      }\n\n      return didInputMatch;\n    } else {\n      /**\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\n       */\n      return true;\n    }\n  }\n\n  /**\n   * Handles simple-keyboard event listeners\n   */\n  setEventListeners(): void {\n    /**\n     * Only first instance should set the event listeners\n     */\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\n      if (this.options.debug) {\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\n      }\n\n      const { physicalKeyboardHighlightPreventDefault = false } = this.options;\n\n      /**\n       * Event Listeners\n       */\n      document.addEventListener(\"keyup\", this.handleKeyUp, physicalKeyboardHighlightPreventDefault);\n      document.addEventListener(\"keydown\", this.handleKeyDown, physicalKeyboardHighlightPreventDefault);\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\n      document.addEventListener(\"touchend\", this.handleTouchEnd);\n      document.addEventListener(\"selectionchange\", this.handleSelectionChange);\n      document.addEventListener(\"select\", this.handleSelect);\n    }\n  }\n\n  /**\n   * Event Handler: KeyUp\n   */\n  handleKeyUp(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n\n    if (this.options.physicalKeyboardHighlight) {\n      this.physicalKeyboard.handleHighlightKeyUp(event);\n    }\n  }\n\n  /**\n   * Event Handler: KeyDown\n   */\n  handleKeyDown(event: KeyboardHandlerEvent): void {\n    if (this.options.physicalKeyboardHighlight) {\n      this.physicalKeyboard.handleHighlightKeyDown(event);\n    }\n  }\n\n  /**\n   * Event Handler: MouseUp\n   */\n  handleMouseUp(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Event Handler: TouchEnd\n   */\n  /* istanbul ignore next */\n  handleTouchEnd(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Event Handler: Select\n   */\n  /* istanbul ignore next */\n  handleSelect(event: KeyboardHandlerEvent): void {\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Event Handler: SelectionChange\n   */\n  /* istanbul ignore next */\n  handleSelectionChange(event: KeyboardHandlerEvent): void {\n    /**\n     * Firefox is not reporting the correct caret position through this event\n     * https://github.com/hodgef/simple-keyboard/issues/1839\n     */\n    if(navigator.userAgent.includes('Firefox')){\n      return;\n    }\n    this.caretEventHandler(event);\n  }\n\n  /**\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\n   */\n  caretEventHandler(event: KeyboardHandlerEvent): void {\n    let targetTagName: string;\n    if (event.target.tagName) {\n      targetTagName = event.target.tagName.toLowerCase();\n    }\n\n    this.dispatch((instance) => {\n      let isKeyboard =\n        event.target === instance.keyboardDOM ||\n        (event.target && instance.keyboardDOM.contains(event.target));\n\n      /**\n       * If syncInstanceInputs option is enabled, make isKeyboard match any instance\n       * not just the current one\n       */\n      if (this.options.syncInstanceInputs && Array.isArray(event.path)) {\n        isKeyboard = event.path.some((item: HTMLElement) =>\n          item?.hasAttribute?.(\"data-skInstance\")\n        );\n      }\n\n      if (\n        (targetTagName === \"textarea\" ||\n          (targetTagName === \"input\" &&\n            [\"text\", \"search\", \"url\", \"tel\", \"password\"].includes(\n              event.target.type\n            ))) &&\n        !instance.options.disableCaretPositioning\n      ) {\n        /**\n         * Tracks current cursor position\n         * As keys are pressed, text will be added/removed at that position within the input.\n         */\n        let selectionStart = event.target.selectionStart;\n        let selectionEnd = event.target.selectionEnd;\n\n        if(instance.options.rtl){\n          selectionStart = instance.utilities.getRtlOffset(selectionStart, instance.getInput());\n          selectionEnd = instance.utilities.getRtlOffset(selectionEnd, instance.getInput());\n        }\n\n        instance.setCaretPosition(selectionStart, selectionEnd);\n\n        /**\n         * Tracking current input in order to handle caret positioning edge cases\n         */\n        this.activeInputElement = event.target;\n\n        if (instance.options.debug) {\n          console.log(\n            \"Caret at: \",\n            instance.getCaretPosition(),\n            instance.getCaretPositionEnd(),\n            event && event.target.tagName.toLowerCase(),\n            `(${instance.keyboardDOMClass})`,\n            event?.type\n          );\n        }\n      } else if (\n        (instance.options.disableCaretPositioning || !isKeyboard) &&\n        event?.type !== \"selectionchange\"\n      ) {\n        /**\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\n         */\n        instance.setCaretPosition(null);\n\n        /**\n         * Resetting activeInputElement\n         */\n        this.activeInputElement = null;\n\n        if (instance.options.debug) {\n          console.log(\n            `Caret position reset due to \"${event?.type}\" event`,\n            event\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Execute an operation on each button\n   */\n  recurseButtons(fn: any): void {\n    if (!fn) return;\n\n    Object.keys(this.buttonElements).forEach((buttonName) =>\n      this.buttonElements[buttonName].forEach(fn)\n    );\n  }\n\n  /**\n   * Destroy keyboard listeners and DOM elements\n   */\n  destroy(): void {\n    if (this.options.debug)\n      console.log(\n        `Destroying simple-keyboard instance: ${this.currentInstanceName}`\n      );\n\n    const { physicalKeyboardHighlightPreventDefault = false } = this.options;\n\n    /**\n     * Remove document listeners\n     */\n    document.removeEventListener(\"keyup\", this.handleKeyUp, physicalKeyboardHighlightPreventDefault);\n    document.removeEventListener(\"keydown\", this.handleKeyDown, physicalKeyboardHighlightPreventDefault);\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\n    document.removeEventListener(\"touchend\", this.handleTouchEnd);\n    document.removeEventListener(\"select\", this.handleSelect);\n    document.removeEventListener(\"selectionchange\", this.handleSelectionChange);\n    document.onpointerup = null;\n    document.ontouchend = null;\n    document.ontouchcancel = null;\n    document.onmouseup = null;\n\n    /**\n     * Remove buttons\n     */\n    const deleteButton = (buttonElement: KeyboardElement | null) => {\n      if (buttonElement) {\n        buttonElement.onpointerdown = null;\n        buttonElement.onpointerup = null;\n        buttonElement.onpointercancel = null;\n        buttonElement.ontouchstart = null;\n        buttonElement.ontouchend = null;\n        buttonElement.ontouchcancel = null;\n        buttonElement.onclick = null;\n        buttonElement.onmousedown = null;\n        buttonElement.onmouseup = null;\n\n        buttonElement.remove();\n        buttonElement = null;\n      }\n    };\n\n    this.recurseButtons(deleteButton);\n\n    /**\n     * Remove wrapper events\n     */\n    this.keyboardDOM.onpointerdown = null;\n    this.keyboardDOM.ontouchstart = null;\n    this.keyboardDOM.onmousedown = null;\n\n    /**\n     * Clearing keyboard rows\n     */\n    this.resetRows();\n\n    /**\n     * Candidate box\n     */\n    if (this.candidateBox) {\n      this.candidateBox.destroy();\n      this.candidateBox = null;\n    }\n\n    /**\n     * Clearing activeInputElement\n     */\n    this.activeInputElement = null;\n\n    /**\n     * Removing instance attribute\n     */\n    this.keyboardDOM.removeAttribute(\"data-skInstance\");\n\n    /**\n     * Clearing keyboardDOM\n     */\n    this.keyboardDOM.innerHTML = \"\";\n\n    /**\n     * Remove instance\n     */\n    window[\"SimpleKeyboardInstances\"][this.currentInstanceName] = null;\n    delete window[\"SimpleKeyboardInstances\"][this.currentInstanceName];\n\n    /**\n     * Reset initialized flag\n     */\n    this.initialized = false;\n  }\n\n  /**\n   * Process buttonTheme option\n   */\n  getButtonThemeClasses(button: string): string[] {\n    const buttonTheme = this.options.buttonTheme;\n    let buttonClasses: string[] = [];\n\n    if (Array.isArray(buttonTheme)) {\n      buttonTheme.forEach((themeObj) => {\n        if (\n          themeObj &&\n          themeObj.class &&\n          typeof themeObj.class === \"string\" &&\n          themeObj.buttons &&\n          typeof themeObj.buttons === \"string\"\n        ) {\n          const themeObjClasses = themeObj.class.split(\" \");\n          const themeObjButtons = themeObj.buttons.split(\" \");\n\n          if (themeObjButtons.includes(button)) {\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\n          }\n        } else {\n          console.warn(\n            `Incorrect \"buttonTheme\". Please check the documentation.`,\n            themeObj\n          );\n        }\n      });\n    }\n\n    return buttonClasses;\n  }\n\n  /**\n   * Process buttonAttributes option\n   */\n  setDOMButtonAttributes(button: string, callback: any): void {\n    const buttonAttributes = this.options.buttonAttributes;\n\n    if (Array.isArray(buttonAttributes)) {\n      buttonAttributes.forEach((attrObj) => {\n        if (\n          attrObj.attribute &&\n          typeof attrObj.attribute === \"string\" &&\n          attrObj.value &&\n          typeof attrObj.value === \"string\" &&\n          attrObj.buttons &&\n          typeof attrObj.buttons === \"string\"\n        ) {\n          const attrObjButtons = attrObj.buttons.split(\" \");\n\n          if (attrObjButtons.includes(button)) {\n            callback(attrObj.attribute, attrObj.value);\n          }\n        } else {\n          console.warn(\n            `Incorrect \"buttonAttributes\". Please check the documentation.`,\n            attrObj\n          );\n        }\n      });\n    }\n  }\n\n  onTouchDeviceDetected() {\n    /**\n     * Processing autoTouchEvents\n     */\n    this.processAutoTouchEvents();\n\n    /**\n     * Disabling contextual window on touch devices\n     */\n    this.disableContextualWindow();\n  }\n\n  /**\n   * Disabling contextual window for hg-button\n   */\n  /* istanbul ignore next */\n  disableContextualWindow() {\n    window.oncontextmenu = (event: KeyboardHandlerEvent) => {\n      if (event.target.classList.contains(\"hg-button\")) {\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n      }\n    };\n  }\n\n  /**\n   * Process autoTouchEvents option\n   */\n  processAutoTouchEvents() {\n    if (this.options.autoUseTouchEvents) {\n      this.options.useTouchEvents = true;\n\n      if (this.options.debug) {\n        console.log(\n          `autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`\n        );\n      }\n    }\n  }\n\n  /**\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\n   */\n  onInit() {\n    if (this.options.debug) {\n      console.log(`${this.keyboardDOMClass} Initialized`);\n    }\n\n    /**\n     * setEventListeners\n     */\n    this.setEventListeners();\n\n    if (typeof this.options.onInit === \"function\") this.options.onInit(this);\n  }\n\n  /**\n   * Executes the callback function before a simple-keyboard render.\n   */\n  beforeFirstRender() {\n    /**\n     * Performing actions when touch device detected\n     */\n    if (this.utilities.isTouchDevice()) {\n      this.onTouchDeviceDetected();\n    }\n\n    if (typeof this.options.beforeFirstRender === \"function\")\n      this.options.beforeFirstRender(this);\n\n    /**\n     * Notify about PointerEvents usage\n     */\n    if (\n      this.isFirstKeyboardInstance &&\n      this.utilities.pointerEventsSupported() &&\n      !this.options.useTouchEvents &&\n      !this.options.useMouseEvents\n    ) {\n      if (this.options.debug) {\n        console.log(\"Using PointerEvents as it is supported by this browser\");\n      }\n    }\n\n    /**\n     * Notify about touch events usage\n     */\n    if (this.options.useTouchEvents) {\n      if (this.options.debug) {\n        console.log(\n          \"useTouchEvents has been enabled. Only touch events will be used.\"\n        );\n      }\n    }\n  }\n\n  /**\n   * Executes the callback function before a simple-keyboard render.\n   */\n  beforeRender() {\n    if (typeof this.options.beforeRender === \"function\")\n      this.options.beforeRender(this);\n  }\n\n  /**\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\n   */\n  onRender() {\n    if (typeof this.options.onRender === \"function\")\n      this.options.onRender(this);\n  }\n\n  /**\n   * Executes the callback function once all modules have been loaded\n   */\n  onModulesLoaded() {\n    if (typeof this.options.onModulesLoaded === \"function\")\n      this.options.onModulesLoaded(this);\n  }\n\n  /**\n   * Register module\n   */\n  registerModule = (name: string, initCallback: any) => {\n    if (!this.modules[name]) this.modules[name] = {};\n\n    initCallback(this.modules[name]);\n  };\n\n  /**\n   * Load modules\n   */\n  loadModules() {\n    if (Array.isArray(this.options.modules)) {\n      this.options.modules.forEach((KeyboardModule) => {\n        const keyboardModule = new KeyboardModule(this);\n        keyboardModule.init && keyboardModule.init(this);\n      });\n\n      this.keyboardPluginClasses = \"modules-loaded\";\n\n      this.render();\n      this.onModulesLoaded();\n    }\n  }\n\n  /**\n   * Get module prop\n   */\n  getModuleProp(name: string, prop: string) {\n    if (!this.modules[name]) return false;\n\n    return this.modules[name][prop];\n  }\n\n  /**\n   * getModulesList\n   */\n  getModulesList() {\n    return Object.keys(this.modules);\n  }\n\n  /**\n   * Parse Row DOM containers\n   */\n  parseRowDOMContainers(\n    rowDOM: HTMLDivElement,\n    rowIndex: number,\n    containerStartIndexes: number[],\n    containerEndIndexes: number[]\n  ) {\n    const rowDOMArray = Array.from(rowDOM.children);\n    let removedElements = 0;\n\n    if (rowDOMArray.length) {\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\n        const endIndex = containerEndIndexes[arrIndex];\n\n        /**\n         * If there exists a respective end index\n         * if end index comes after start index\n         */\n        if (!endIndex || !(endIndex > startIndex)) {\n          return false;\n        }\n\n        /**\n         * Updated startIndex, endIndex\n         * This is since the removal of buttons to place a single button container\n         * results in a modified array size\n         */\n        const updated_startIndex = startIndex - removedElements;\n        const updated_endIndex = endIndex - removedElements;\n\n        /**\n         * Create button container\n         */\n        const containerDOM = document.createElement(\"div\");\n        containerDOM.className += \"hg-button-container\";\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\n\n        /**\n         * Taking elements due to be inserted into container\n         */\n        const containedElements = rowDOMArray.splice(\n          updated_startIndex,\n          updated_endIndex - updated_startIndex + 1\n        );\n        removedElements = updated_endIndex - updated_startIndex;\n\n        /**\n         * Inserting elements to container\n         */\n        containedElements.forEach((element) =>\n          containerDOM.appendChild(element)\n        );\n\n        /**\n         * Adding container at correct position within rowDOMArray\n         */\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\n\n        /**\n         * Clearing old rowDOM children structure\n         */\n        rowDOM.innerHTML = \"\";\n\n        /**\n         * Appending rowDOM new children list\n         */\n        rowDOMArray.forEach((element) => rowDOM.appendChild(element));\n\n        if (this.options.debug) {\n          console.log(\n            \"rowDOMContainer\",\n            containedElements,\n            updated_startIndex,\n            updated_endIndex,\n            removedElements + 1\n          );\n        }\n      });\n    }\n\n    return rowDOM;\n  }\n\n  /**\n   * getKeyboardClassString\n   */\n  getKeyboardClassString = (...baseDOMClasses: any[]) => {\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter(\n      (DOMClass) => !!DOMClass\n    );\n\n    return keyboardClasses.join(\" \");\n  };\n\n  /**\n   * Renders rows and buttons as per options\n   */\n  render() {\n    /**\n     * Clear keyboard\n     */\n    this.resetRows();\n\n    /**\n     * Calling beforeFirstRender\n     */\n    if (!this.initialized) {\n      this.beforeFirstRender();\n    }\n\n    /**\n     * Calling beforeRender\n     */\n    this.beforeRender();\n\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\n    const layout = this.options.layout || getDefaultLayout();\n    const useTouchEvents = this.options.useTouchEvents || false;\n    const useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\n    const useMouseEvents = this.options.useMouseEvents || false;\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\n\n    /**\n     * Adding themeClass, layoutClass to keyboardDOM\n     */\n    this.keyboardDOM.className = this.getKeyboardClassString(\n      this.options.theme,\n      layoutClass,\n      this.keyboardPluginClasses,\n      useTouchEventsClass\n    );\n\n    /**\n     * Adding keyboard identifier\n     */\n    this.keyboardDOM.setAttribute(\"data-skInstance\", this.currentInstanceName);\n\n    /**\n     * Create row wrapper\n     */\n    this.keyboardRowsDOM = document.createElement(\"div\");\n    this.keyboardRowsDOM.className = \"hg-rows\";\n\n    /**\n     * Iterating through each row\n     */\n    layout[this.options.layoutName || this.defaultName].forEach(\n      (row: string, rIndex: number) => {\n        let rowArray = row.split(\" \");\n\n        /**\n         * Enforce excludeFromLayout\n         */\n        if (\n          this.options.excludeFromLayout &&\n          this.options.excludeFromLayout[\n            this.options.layoutName || this.defaultName\n          ]\n        ) {\n          rowArray = rowArray.filter(\n            (buttonName) =>\n              this.options.excludeFromLayout &&\n              !this.options.excludeFromLayout[\n                this.options.layoutName || this.defaultName\n              ].includes(buttonName)\n          );\n        }\n\n        /**\n         * Creating empty row\n         */\n        let rowDOM = document.createElement(\"div\");\n        rowDOM.className += \"hg-row\";\n\n        /**\n         * Tracking container indicators in rows\n         */\n        const containerStartIndexes: number[] = [];\n        const containerEndIndexes: number[] = [];\n\n        /**\n         * Iterating through each button in row\n         */\n        rowArray.forEach((button, bIndex) => {\n          /**\n           * Check if button has a container indicator\n           */\n          const buttonHasContainerStart =\n            !disableRowButtonContainers &&\n            typeof button === \"string\" &&\n            button.length > 1 &&\n            button.indexOf(\"[\") === 0;\n\n          const buttonHasContainerEnd =\n            !disableRowButtonContainers &&\n            typeof button === \"string\" &&\n            button.length > 1 &&\n            button.indexOf(\"]\") === button.length - 1;\n\n          /**\n           * Save container start index, if applicable\n           */\n          if (buttonHasContainerStart) {\n            containerStartIndexes.push(bIndex);\n\n            /**\n             * Removing indicator\n             */\n            button = button.replace(/\\[/g, \"\");\n          }\n\n          if (buttonHasContainerEnd) {\n            containerEndIndexes.push(bIndex);\n\n            /**\n             * Removing indicator\n             */\n            button = button.replace(/\\]/g, \"\");\n          }\n\n          /**\n           * Processing button options\n           */\n          const fctBtnClass = this.utilities.getButtonClass(button);\n          const buttonDisplayName = this.utilities.getButtonDisplayName(\n            button,\n            this.options.display,\n            this.options.mergeDisplay\n          );\n\n          /**\n           * Creating button\n           */\n          const buttonType = this.options.useButtonTag ? \"button\" : \"div\";\n          const buttonDOM = document.createElement(buttonType);\n          buttonDOM.className += `hg-button ${fctBtnClass}`;\n\n          /**\n           * Adding buttonTheme\n           */\n          buttonDOM.classList.add(...this.getButtonThemeClasses(button));\n\n          /**\n           * Adding buttonAttributes\n           */\n          this.setDOMButtonAttributes(\n            button,\n            (attribute: string, value: string) => {\n              buttonDOM.setAttribute(attribute, value);\n            }\n          );\n\n          this.activeButtonClass = \"hg-activeButton\";\n\n          /**\n           * Handle button click event\n           */\n          /* istanbul ignore next */\n          if (\n            this.utilities.pointerEventsSupported() &&\n            !useTouchEvents &&\n            !useMouseEvents\n          ) {\n            /**\n             * Handle PointerEvents\n             */\n            buttonDOM.onpointerdown = (e: KeyboardHandlerEvent) => {\n              this.handleButtonClicked(button, e);\n              this.handleButtonMouseDown(button, e);\n            };\n            buttonDOM.onpointerup = (e: KeyboardHandlerEvent) => {\n              this.handleButtonMouseUp(button, e);\n            };\n            buttonDOM.onpointercancel = (e: KeyboardHandlerEvent) => {\n              this.handleButtonMouseUp(button, e);\n            };\n          } else {\n            /**\n             * Fallback for browsers not supporting PointerEvents\n             */\n            if (useTouchEvents) {\n              /**\n               * Handle touch events\n               */\n              buttonDOM.ontouchstart = (e: KeyboardHandlerEvent) => {\n                this.handleButtonClicked(button, e);\n                this.handleButtonMouseDown(button, e);\n              };\n              buttonDOM.ontouchend = (e: KeyboardHandlerEvent) => {\n                this.handleButtonMouseUp(button, e);\n              };\n              buttonDOM.ontouchcancel = (e: KeyboardHandlerEvent) => {\n                this.handleButtonMouseUp(button, e);\n              };\n            } else {\n              /**\n               * Handle mouse events\n               */\n              buttonDOM.onclick = (e: KeyboardHandlerEvent) => {\n                this.setMouseHold(false);\n                /**\n                 * Fire button handler in onclick for compatibility reasons\n                 * This fires handler before onKeyReleased, therefore when that option is set we will fire the handler\n                 * in onmousedown instead\n                 */\n                if (typeof this.options.onKeyReleased !== \"function\") {\n                  this.handleButtonClicked(button, e);\n                }\n              };\n              buttonDOM.onmousedown = (e: KeyboardHandlerEvent) => {\n                /**\n                 * Fire button handler for onKeyReleased use-case\n                 */\n                if (\n                  typeof this.options.onKeyReleased === \"function\" &&\n                  !this.isMouseHold\n                ) {\n                  this.handleButtonClicked(button, e);\n                }\n                this.handleButtonMouseDown(button, e);\n              };\n              buttonDOM.onmouseup = (e: KeyboardHandlerEvent) => {\n                this.handleButtonMouseUp(button, e);\n              };\n            }\n          }\n\n          /**\n           * Adding identifier\n           */\n          buttonDOM.setAttribute(\"data-skBtn\", button);\n\n          /**\n           * Adding unique id\n           * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\n           */\n          const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\n          buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\n\n          /**\n           * Adding button label to button\n           */\n          const buttonSpanDOM = document.createElement(\"span\");\n          buttonSpanDOM.innerHTML = buttonDisplayName;\n          buttonDOM.appendChild(buttonSpanDOM);\n\n          /**\n           * Adding to buttonElements\n           */\n          if (!this.buttonElements[button]) this.buttonElements[button] = [];\n\n          this.buttonElements[button].push(buttonDOM);\n\n          /**\n           * Appending button to row\n           */\n          rowDOM.appendChild(buttonDOM);\n        });\n\n        /**\n         * Parse containers in row\n         */\n        rowDOM = this.parseRowDOMContainers(\n          rowDOM,\n          rIndex,\n          containerStartIndexes,\n          containerEndIndexes\n        );\n\n        /**\n         * Appending row to hg-rows\n         */\n        this.keyboardRowsDOM.appendChild(rowDOM);\n      }\n    );\n\n    /**\n     * Appending row to keyboard\n     */\n    this.keyboardDOM.appendChild(this.keyboardRowsDOM);\n\n    /**\n     * Calling onRender\n     */\n    this.onRender();\n\n    if (!this.initialized) {\n      /**\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\n       */\n      this.initialized = true;\n\n      /**\n       * Handling parent events\n       */\n      /* istanbul ignore next */\n      if (\n        this.utilities.pointerEventsSupported() &&\n        !useTouchEvents &&\n        !useMouseEvents\n      ) {\n        document.onpointerup = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n        this.keyboardDOM.onpointerdown = (e: KeyboardHandlerEvent) =>\n          this.handleKeyboardContainerMouseDown(e);\n      } else if (useTouchEvents) {\n        /**\n         * Handling ontouchend, ontouchcancel\n         */\n        document.ontouchend = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n        document.ontouchcancel = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n\n        this.keyboardDOM.ontouchstart = (e: KeyboardHandlerEvent) =>\n          this.handleKeyboardContainerMouseDown(e);\n      } else if (!useTouchEvents) {\n        /**\n         * Handling mouseup\n         */\n        document.onmouseup = (e: KeyboardHandlerEvent) =>\n          this.handleButtonMouseUp(undefined, e);\n        this.keyboardDOM.onmousedown = (e: KeyboardHandlerEvent) =>\n          this.handleKeyboardContainerMouseDown(e);\n      }\n\n      /**\n       * Calling onInit\n       */\n      this.onInit();\n    }\n  }\n}\n\nexport default SimpleKeyboard;\n","export const getDefaultLayout = () => {\n  return {\n    default: [\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\n      \"{lock} a s d f g h j k l ; ' {enter}\",\n      \"{shift} z x c v a n m , . / {shift}\",\n      \".com @ {space}\",\n    ],\n    shift: [\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\n      \"{tab} Q W E R T Y U I O P { } |\",\n      '{lock} A S D F G H J K L : \" {enter}',\n      \"{shift} Z X C V A N M < > ? {shift}\",\n      \".com @ {space}\",\n    ],\n  };\n};\n","import SimpleKeyboard from \"./components/Keyboard\";\nexport { SimpleKeyboard };\nexport default SimpleKeyboard;\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Utilities","_ref","getOptions","getCaretPosition","getCaretPositionEnd","dispatch","_classCallCheck","_defineProperty","button","length","bindMethods","includes","buttonTypeClass","getButtonType","buttonWithoutBraces","replace","buttonNormalized","concat","display","arguments","undefined","assign","getDefaultDiplay","input","caretPos","caretPosEnd","moveCaret","options","commonParams","output","removeAt","apply","removeForwardsAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","debug","console","log","minus","newCaretPos","updateCaretPosAction","instance","setCaretPosition","caretPosition","source","str","position","positionEnd","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","window","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","arr","size","_toConsumableArray","Array","Math","ceil","map","_","i","index","newIndex","startMarkerIndex","indexOf","myClass","_step","_iterator","_createForOfIteratorHelper","getOwnPropertyNames","s","n","done","myMethod","bind","err","e","f","PhysicalKeyboard","_this","altKey","ctrlKey","shiftKey","code","keyCodeToKey","keyCode","_this2","physicalKeyboardHighlightPreventDefault","isMofifierKey","preventDefault","stopImmediatePropagation","buttonPressed","getSimpleKeyboardLayoutKey","timers","setTimeout","onLongPress","buttonDOM","buttonName","standardButtonPressed","getButtonElement","functionButtonPressed","_buttonDOM$","applyButtonStyle","buttonElement","style","background","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","isArray","forEach","physicalKeyboardHighlightPress","physicalKeyboardHighlightPressUsePointerEvents","onpointerdown","physicalKeyboardHighlightPressUseClick","_buttonDOM$2","click","handleButtonClicked","_buttonDOM$3","removeAttribute","onpointerup","_output","keyId","CandidateBox","utilities","pageSize","layoutCandidatesPageSize","candidateBoxElement","remove","pageIndex","_ref2","candidateValue","targetElement","onSelect","candidateListPages","chunkArray","renderPage","nbPages","onItemSelected","selectedCandidate","destroy","_ref3","_this$candidateBoxEle","document","createElement","className","candidateListULElement","candidateListItem","_this2$options$displa","candidateListLIElement","getMouseEvent","mouseEvent","useTouchEvents","TouchEvent","MouseEvent","innerHTML","ontouchstart","onclick","appendChild","isPrevBtnElementActive","prevBtnElement","classList","add","prevBtnElementClickAction","isNextBtnElementActive","nextBtnElement","nextBtnElementClickAction","prepend","SimpleKeyboard","selectorOrOptions","keyboardOptions","keyboardDOMClass","keyboardDOM","querySelector","HTMLDivElement","warn","Error","caretPositionEnd","name","initCallback","modules","_len","baseDOMClasses","_key","filter","DOMClass","_this$handleParams","handleParams","_this$handleParams$op","_objectSpread","layoutName","theme","preventMouseDownDefault","enableLayoutCandidates","excludeFromLayout","keyboardPluginClasses","_this$options$inputNa","defaultName","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","candidateBox","render","loadModules","endPosition","_this$options","layoutCandidatesObj","layoutCandidates","layoutCandidatesCaseSensitiveMatch","layoutCandidate","inputSubstr","regexp","RegExp","escapeRegex","matchAll","candidateKey","sort","a","b","_this3","show","_this3$options","disableCandidateNormalization","enableLayoutCandidatesKeyPress","candidateStr","normalize","getInput","initialCaretPosition","newInputSubstr","newInput","caretPositionDiff","newCaretPosition","setInput","onKeyPress","onChange","onChangeAll","getAllInputs","_this$options2","_this$options2$inputN","getUpdatedInput","isStandardButton","activeInputElement","setSelectionRange","isMouseHold","inputPattern","inputPatternIsValid","handleMaxLength","newInputValue","type","syncInstanceInputs","target","_this$candidateBox","_this$getInputCandida","getInputCandidates","showCandidatesBox","_this4","stopMouseDownPropagation","stopPropagation","activeButtonClass","holdInteractionTimeout","clearTimeout","getMouseHold","handleButtonHold","holdTimeout","setMouseHold","disableButtonHold","_this5","preventMouseUpDefault","stopMouseUpPropagation","contains","recurseButtons","onKeyReleased","_this6","_this7","replaceInput","skipSync","rtl","_this8","changedOptions","onSetOptions","newOptions","_this9","optionName","JSON","stringify","keyboardRowsDOM","setAttribute","callback","buttons","_this10","classNameItem","buttonTheme","classNameFound","buttonThemeArray","push","class","_this11","_this11$options","_this11$options$butto","_buttonTheme","_this11$options$butto2","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","didInputMatch","test","_this$options$physica","addEventListener","handleKeyUp","handleKeyDown","handleMouseUp","handleTouchEnd","handleSelectionChange","handleSelect","event","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","userAgent","targetTagName","_this12","tagName","isKeyboard","path","some","_item$hasAttribute","hasAttribute","disableCaretPositioning","selectionStart","selectionEnd","getRtlOffset","fn","_this13","_this$options$physica2","removeEventListener","ontouchend","ontouchcancel","onmouseup","onpointercancel","onmousedown","resetRows","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","autoUseTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","_this14","KeyboardModule","keyboardModule","init","rowDOM","rowIndex","containerStartIndexes","containerEndIndexes","_this15","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","containerUID","containedElements","element","_this16","layoutClass","layout","default","shift","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","row","rIndex","rowArray","bIndex","_buttonDOM$classList","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","mergeDisplay","buttonType","useButtonTag","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown"],"sourceRoot":""}